#!/bin/bash
#shellcheck disable=2155

bag() {
    if [ "$#" -eq 0 ]; then
        printf "%b Not enough arguments.\n" "$ERROR"
        printf "Usage: bag <pattern> [<search_dir>]\n"
    else
        local startsearch="$2"
        vim "+/$1" "$(ag -il "$1" "${startsearch:="."}" | uniq)"
    fi
}

beep() {
    local pid
    (
        ( speaker-test -t sine -f 1000 )& pid=$! \
        && sleep 0.1s \
        && kill -9 "$pid"
    ) > /dev/null
}

bfind() {
    if [ "$#" -eq 0 ]; then
        printf "%b Not enough arguments.\n" "$ERROR"
        printf "Usage: bfind <pattern> [<search_dir>]\n"
    else
        local startsearch="$2"
        # http://blog.sanctum.geek.nz/unix-as-ide-files/
        #
        #   "You can use + as the terminating character instead if you want to put all
        #    of the results on one invocation of the command. One trick I find myself
        #    using often is using find to generate lists of files that I then edit in
        #    vertically split Vim windows"
        #
        find "${startsearch:="."}" -type f -name "$1" -exec vim {} + 2> /dev/null
    fi
}

bgrep() {
    if [ "$#" -eq 0 ]; then
        printf "%b Not enough arguments.\n" "$ERROR"
        printf "Usage: bgrep <pattern> [<root_dir>]\n"
    else
        local startsearch="$2"
        vim "+/$1" "$(grep -riIl "$1" "${startsearch:="."}" | uniq)"
    fi
}

# Setup script boilerplate.
bp() {
    if [ "$#" -eq 0 ]
    then
        printf "%b Not enough arguments.\n" "$ERROR"
        printf "Usage: bp <filename>\n"
    else
        # Let's not overwrite an existing file. `stat` and test the process exit code.
        # Check exit code of `stat` call before proceeding.
        # An error (return value of 1 in this case) means that the file does not exist.
        if ! stat "$1" &> /dev/null
        then
            case "$1" in
                Dockerfile)      vim -c ":read $HOME/templates/Dockerfile" "$1" ;;
                Makefile)        echo "This is deprecated, use \`create_makefile [lang]\` function." ;;
                Vagrantfile)     vim -c ":read $HOME/templates/vagrant/Vagrantfile" "$1" ;;
                *.elm)           vim -c ":read $HOME/templates/elm" "$1" ;;
                *.html)          vim -c ":read $HOME/templates/html" "$1" ;;
                *.sh)            vim -c ":read $HOME/templates/bash" "$1" ;;
                *)               vim -c ":normal ibp" "$1" ;;
            esac
        else
            printf "%b File exists, aborting.\n" "$WARN"
        fi
    fi
}

create_makefile() {
    case "$1" in
        C) ;& # fallthrough
        c) vim -c ":read $HOME/templates/Makefile-c" Makefile ;;
        go) ;&
        Go) vim -c ":read $HOME/templates/Makefile-go" Makefile ;;
        *) echo "Unknown, nothing to do" ;;
    esac
}

dim_screen() {
    # Run `xrandr` to get attached screens.
    local value="$1"

    if [ "$#" -eq 0 ]
    then
        printf "Usage: dim_screen [0 < value <= 1]\n"
    else
        xrandr --output eDP-1 --brightness "$value"
    fi
}

dpkg_search() {
    local package="$1"
    local state="$2"

    if [ -z "$package" ] || [ -z "$state" ]
    then
        printf "Usage: dpkg_search PACKAGE STATE\n"
    else
        for log in $(ls /var/log/dpkg*)
        do
            local re='\b'"$state"'\b.*'"$package"''
            local res="$(zgrep -E "$re" "$log")"

            if [ "$res" = "" ]
            then
                printf "%b %s\n" "$NO_MATCH" "$log"
            else
                printf "%b %s\n" "$MATCH" "$log"
                printf "%s\n" "$res"
            fi
        done
    fi
}

# Deprecating this in favor of https://github.com/btoll/dump_describes node module.
# I'm leaving it here just for an example of a `sed` command.
#dump_describes() {
#    sed -n -E 's/^[[:space:]]{1,7}describe\('\(.*\)'/\1/p' "$1" | cut -d, -f1
#}

falloc() {
    if [ "$#" -lt 2 ]; then
        printf "%b Not enough arguments.\n" "$ERROR"
        printf "Usage: falloc <name> <size (ex. 1GB, 500MB)>\n"
    else
        NAME="$1"
        SIZE="$2"

        fallocate -l "$SIZE $NAME"
        sudo mkfs.ext3 "$NAME"
    fi
}

# `ff` for "fuzzy find"!
ff() {
    local projects_dir=${1:-"$HOME/projects"}
    dir=$(find "$projects_dir" -type d -not -path '*/\.*' -maxdepth 10 2> /dev/null | fzf)
    cd "$dir" || return
}

get_code_point() {
    if [ -z "$1" ]; then
        printf "Usage: get_code_point <char>\n"
    else
        # -A = Specify the input address base (n == no address)
        # -t = Specify the output format (d == signed decimal, 4 == four bytes)
        printf "$1" | od -A n -t d4
    fi
}

git_clone() {
    local git_repo="$1"
    local git_alias="$2"
    local base
    local should_install

    if [ -z "$git_repo" ]
    then
        printf "Usage: git_clone <git_repo> [ <git_alias> ]\n"
    else
        if [ -z "$git_alias" ]
        then
            # This will match:
            #
            #    https://github.com/btoll/dotfiles.git
            #    or
            #    git@github.com:btoll/dotfiles.git
            #    or
            #    git+https://github.com/btoll/dotfiles
            #
            # and capture only `dotfiles`.
            base=$([[ "$git_repo" = *.* ]] && basename "$git_repo" || printf "\n")
            # Remove the `.git` extension.
            git_alias="${base%.git}"
        fi

        if git clone "$git_repo" "$git_alias" 2> /dev/null
        then
            printf "%b Cloned into ./$git_alias/\n" "$INFO"

            read -rp "Install git hooks? [y|N]: " should_install

            if [ "$should_install" = y ] || [ "$should_install" = Y ]
            then
                # Don't change into another dir w/o user permission!
                # Do this in a subshell for now.
                (
                    cd "$git_alias" || return ;
                    git_hooks_install
                )
            else
                printf "%b Git hooks not installed.\n" "$INFO"
            fi
        else
            printf "%b The \`$git_repo\` repository could not be cloned.\n" "$ERROR"
        fi
    fi
}

go_tmux() {
    SESSION=${1:-$(pwd)}

    if ! tmux has-session -t "$SESSION" 2> /dev/null
    then
        tmux new-session -s "$SESSION" -d
    fi

    tmux attach -t "$SESSION"
    clear
}

hexbits() {
    if [ "$#" -eq 0 ]; then
        printf "Usage: hexbits <hexadecimal> [number of display bytes]\n"
        printf "For example: hexbits 0x646f67 2\n"
    else
        asbits "$(htoi "$1")" "${2:-4}"
    fi
}

h() {
    if [ "$#" -eq 0 ]; then
        printf "Usage: h SEARCH_STRING\n"
    else
        history | ag "$1"
    fi
}

list_make_targets() {
    if [ "$#" -gt 1 ]; then
        printf "Usage: list_make_targets [Makefile]\n"
        printf "%b Too many arguments.\n" "$ERROR"
    else
        # Collect strings that begin with a lower- or upper-case character or
        # a `$` sign (for a variable).
        # and contain a colon.
        # This will filter out comments and `.PHONY`.
        # The collected strings will also contain the target's dependencies.
        sed -n 's/^\([a-zA-Z$-].*:\)/\1/p' "${1:-Makefile}"
    fi
}

mcd() {
    mkdir -p "$1" && cd "$_" || return
}

mnt_me() {
    if [ "$#" -lt 2 ]; then
        printf "%b Not enough arguments.\n" "$ERROR"
        printf "Usage: mnt_me <name> <mount point>\n"
    else
        NAME="$1"
        MNT="$2"

        if ! lsmod | grep loop &> /dev/null
        then
            # Add the loop device if not present.
            sudo modprobe loop
        fi

        mkdir -p "$MNT"
        sudo mount -o loop "$NAME" "$MNT"
    fi
}

moby_dick() {
    # Well, sort of (apologies to John Bonham)...
    #
    # Let's ring the bell (BEL)!
    # `tput bel` or `echo -e "\a"` or `echo $'\a'` are all (mostly) equivalent.
    # After much fiddling around because I couldn't get the beep to work,
    # I'm using the `speaker-test` binary that is part of `alsa`:
    # https://unix.stackexchange.com/a/163716

    beep
    sleep .2
    beep
    sleep .2
    beep
    sleep .2
    beep

    sleep .4
    beep
    sleep .4
    beep
    sleep .4
    beep

    sleep .4
    beep
    sleep .2
    beep
    sleep .2
    beep
    sleep .2
    beep

    sleep 1
}

# Use `fzf` to create a list of all machines in `/var/lib/machines` and
# have the selection automatically create and run the container.
nspawn() {
    sudo systemd-nspawn --machine \
        "$(machinectl list-images --no-legend | awk '{ print $1 }' | fzf --border-label="systemd-nspawn machines")" \
        --quiet
}

# First and only argument is the profile, defaults to "default".
parse_aws_creds() {
    local creds
    local account="${1:-default}"
    local access_keys="$HOME/aws-access-keys/${account}.csv"

    if [ ! -f  "$access_keys" ]
    then
        printf "%b Access keys for profile \`$account\` do not exist!\n" "[ERROR]"
    else
        creds=$(< "$access_keys" tail -1)
        a=$(echo "$creds" | awk -F, '{ print $1 }')
        b=$(echo "$creds" | awk -F, '{ print $2 }')

        printf "export AWS_DEFAULT_REGION=us-east-2\n"
        printf "export AWS_ACCESS_KEY_ID=%s\n" "$(printf "%s\n" "$a")"
        printf "export AWS_SECRET_ACCESS_KEY=\"%s\"\n" "$(printf "%s\n" "$b")"
    fi
}

# Remove by inode.
rmi() {
    if [ "$#" -eq 0 ]; then
        printf "%b Not enough arguments.\n" "$ERROR"
        printf "Usage: rmi file [file ...]\n"
    else
        for FILE in "$@"; do
            local inode=$(ls -i "$FILE" | cut -f1 -d" ")
            find . -inum "$inode" -exec rm -rf {} \; 2> /dev/null
        done
    fi
}

rmi_images() {
    for image in $(docker images | tail -n +2 | awk '{print $3}')
    do
        docker rmi -f "$image"
    done
}

rmi_images_by_name() {
    local name
    name="$1"

    if [ -z "$name" ]
    then
        printf "%b Not enough arguments.\n" "$ERROR"
        printf "Usage: rmi_images_by_name name\n"
    fi

    docker images -a | ag "$name" | awk '{print $3}' | xargs docker rmi
}

rm_containers() {
    docker container rm "$(docker container ls -aq)"
}

rm_volumes() {
    docker volume rm "$(docker volume ls --quiet)"
}

secure_browse() {
    # http://www.catonmat.net/blog/linux-socks5-proxy/
    #
    # -f - Requests ssh to go to background just before command execution.
    # -N - Do not execute a remote command.
    # -D - Specifies a local "dynamic" application-level port forwarding.
    #
    # Also, in FF make sure to set network.proxy.socks_remote_dns to true so DNS queries aren't leaked to the ISP.
    if [ $# -eq 0 ]; then
        printf "%b Not enough arguments.\n" "$ERROR"
        printf "Usage: secure_browse <website_to_tunnel_traffic>\n"
    else
        if ! ssh -f -N -D 1080 "$1"
        then
            printf "%b Could not establish tunnel\n" "$WARN"
        else
            firefox &> /dev/null &
        fi
    fi
}

set_displays() {
    local display_names=($(xrandr | awk '/\<connected\>/ {print $1}'))

    # If we don't do this check, then it will turn off the only connected display, the internal display.
    # I found this out the hard way.
    if [[ "${#display_names[@]}" == 1 ]]
    then
        printf "%b Internal display is the only current connection, aborting...\n" "$WARN"
    else
        if [ "$1" = off ]
        then
            xrandr --output "${display_names[1]}" --off
        else
            local location=${1:-left}
            # The first display is the internal display, usually eDP-1.
            xrandr --output "${display_names[0]}" --primary --auto --output "${display_names[1]}" --auto "--${location}-of" "${display_names[0]}"
        fi
    fi
}

shaq() {
    printf "It's supposed to be 1-2-3, not 1-2 back to 1.\nhttps://www.youtube.com/watch?v=y44DaWQH8-0\n"
}

# Background a job to interrupt you, you hard worker!
take_a_break() {
    local mins="$1"
    local s="s"

    if [ -z "$mins" ]
    then
        mins=30
    fi

    if [ "$mins" -eq 1 ]
    then
        s=
    fi

    printf "You're going to do something different in $mins minute%s!\n" "$s"

    # Note that Bash shells must run the commands in a subshell!
    (
        # http://www.tldp.org/LDP/abs/html/arithexp.html
        sleep "$((mins * 60))" ;

        # If in an XSession use `xset`, else use `setterm` when in terminal.
#        if [ -z $XTERM_SHELL ]; then
#            setterm -blength 100 &> /dev/null ;
#        else
#            xset b on
#        fi

        moby_dick ;

        # TODO: Set value of `b` back to what it was before rather than just turning it off.
#        if [ -z $XTERM_SHELL ]; then
#            setterm -blength 0
#        else
#            xset b off
#        fi
    )&
}

# Specify the number of seconds to sleep before taking the screenshot.
# Increase the default of 5 seconds if more time is needed to prepare the screenshot.
# If imagemagick doesn't work, see this https://how-2-take-a-screenshot.com/ubuntu-linux/.
#
# The following takes a partial screenshot.  After invoking it, go to the window and drag
# the mouse to get the desired screenshot.
#
#       import filename.png
#
take_screenshot() {
    if [ "$#" -eq 0 ]; then
        printf "Usage: take_screenshot outfile [sleep=5]\n"
    else
        local seconds=${2:-5}

        sleep "$seconds"
        xwd -root | convert - "$1"
        #xwd -root | xwdtopnm | pnmtopng > "$1"
    fi
}

toggle_sound() {
    amixer sset Master unmute
    amixer sset Headphone unmute
    amixer sset Speaker unmute
}

vagrant_init() {
    local hostname

    if [ -n "$1" ]
    then
        mkdir -p "$1" && cd "$_" || return
        hostname="$1"
    else
        hostname="$(basename "$(pwd)")"
        echo "$hostname"
    fi

    cp -ir "$HOME/templates/vagrant/"* "$(pwd)"
    # Set hostname in Vagrantfiles:
    # config.vm.hostname = "vagrant-HOSTNAME"
    sed -i "s/HOSTNAME/$hostname/" "$(pwd)"/Vagrantfile*
}

wifi_connect() {
    sudo iw dev wlp3s0 connect -w "$1" &> /dev/null
    sudo dhclient wlp3s0
}

wifi_scan() {
    sudo iw dev wlp3s0 scan | ag SSID
}

