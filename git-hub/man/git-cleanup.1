.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GIT-CLEANUP 1"
.TH GIT-CLEANUP 1 "2018-10-31" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
git\-cleanup \- Delete local and remote branches that have been merged or unmerged and match the given filter.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
git cleanup [\-l] [ \-\-no\-merged ] [ \-\-no\-remote\-delete ] [ \-p pattern ] [ \-f file ] [ \-r remote ] [ \-i interactive ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script will delete any git branch, both locally and remotely, that has been merged or unmerged and that matches the filtered search.  If unsure about which branches your fuzzy search will match and delete, it is recommended to first do a dry run.
.PP
This uses the git command `git branch \-\-merged` under the covers.
.PP
This does the following:
.PP
\&\- will delete all branches that match the filter, both local and remote
\&\- uses getopts, so will accept arguments in any order
.PP
Note that you can also define the following environment variables used by the script:
.PP
.Vb 2
\&    GIT_CLEANUP_PATTERN
\&    GIT_CLEANUP_REPO
.Ve
.PP
The biggest fear is of accidentally deleting a branch that hasn't been merged yet, and the most likely scenario for this is that of an unpushed branch. This is mitigated by the program warning you if the branch you're on is in the list of merged branches.
.PP
The only scenarios in which a local branch will be deleted is when it contains no commits.
.PP
The script will not force delete (`\-D`) any branches!
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-h\fR Help
.PP
\&\fB\-f\fR It's possible to specify a file to which all of the git branch deletion commands will be written.
    This will not delete any branches. It's intention is to allow for further inspection of all the deletion candidates. The file will be executable.
.PP
\&\fB\-i\fR Interactive mode.
.PP
\&\fB\-l\fR Will operate in \s-1DRY RUN\s0 mode.  Will list all branches to be deleted.
    This is useful (and safe) when you are not sure which branches will be removed by the filter.
.PP
\&\fB\-\-no\-merged\fR Operate on unmerged branches instead.
.PP
\&\fB\-\-no\-remote\-delete\fR Do not delete the branches remotely.
.PP
\&\fB\-p\fR The pattern to use for existing local branches.
    Defaults to '.'
.PP
\&\fB\-r\fR The name of the remote repository from which to delete the branch.
    Defaults to 'origin'.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
git cleanup [defaults to \-r origin \-f \s-1EXTJS\s0.*]
.PP
git cleanup \-r origin
.PP
git cleanup \-p \*(L"\s-1HELLO\s0.*\*(R"
.PP
git cleanup \-p \*(L"\s-1WORLD\s0.*\*(R" \-r btoll
.PP
git cleanup \-\-no\-merged \-f delete.sh
.PP
git cleanup \-\-no\-merged \-i
.SH "AUTHOR"
.IX Header "AUTHOR"
Benjamin Toll <benjam72@yahoo.com>
