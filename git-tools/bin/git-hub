#!/bin/bash
#
# Note that if listing a directory, Git Hub will replace the word
# 'blob' in the url with 'tree', e.g.:
#
# https://github.com/btoll/git/blob/master/bin
# becomes
# https://github.com/btoll/git/tree/master/bin
#
# and vice-versa if viewing a file (i.e., "tree" => "blob").
#

set -eo pipefail

ARCH=$(uname)
BLAME=false
BRANCH=
FILE=
GET_HASH=
HASH=
RANGE=
REL_PATH=
REMOTE_BRANCH=
TOKEN=
GITHUB_URL=

usage() {
    printf "GIT-HUB

Usage: %s [args]

Args:
--blame        If given will open the branch in the Blame view.
               Not applicable if given a topic branch or hash.

--branch, -b   The branch to use as the base lookup branch on GitHub.

--file, -f     The file to lookup on GitHub. Accepts relative paths.

--get-hash     A branch name can be given instead of a hash. If so,
               this flag will get the hash of the branch, tag, etc.
               For example:

                   git hub --get-hash MY_COOL_TOPIC_BRANCH
                   git hub --get-hash MY_TAG

--hash         The commit hash to lookup on GitHub.

-h             Help.

--range        Specify in the format 'L10-L20' to highlight a visual range
               on GitHub.\n" "$0"
}

set_github_url() {
    # If the url begins with `https://`, leave it be (except if it has the `.git` "extension").
    # Else, if it's a `git` or `ssh` url, we need to change it to an `https://` scheme.
    GITHUB_URL=$(git ls-remote --get-url)

    # If $GITHUB_URL begins with "git", i.e., git@github.com:btoll/utley
    if [[ "$GITHUB_URL" == git* ]]
    then
        # Replaces first match of ":" with "/".
        GITHUB_URL=${GITHUB_URL/://}

        # Replaces first match of "git@" with "https://".
        GITHUB_URL=${GITHUB_URL/git@/https://}
    fi

    # If the url scheme has been rewritten by a git config key, such as:
    #
    # [url "ssh://git@github.com/"]
	#         insteadOf = https://github.com/
    #
    # The result will look like this:
    #    ssh://git@github.com/schacon/ticgit
    #
    # We need to change this, too.
    if [[ "$GITHUB_URL" == ssh* ]]
    then
        GITHUB_URL=${GITHUB_URL/ssh:\/\/git@/https://}
    fi

    # Lastly, if $GITHUB_URL ends with ".git", i.e., btoll/stymie.git
    if [[ "$GITHUB_URL" == *.git ]]
    then
        # Cut ".git"
        GITHUB_URL=${GITHUB_URL%.git}
    fi
}

# Swap out for user-provided options if given.
while [ "$#" -gt 0 ]
do
    case "$1" in
        --blame) BLAME=true ;;
        --branch|-b) shift; REMOTE_BRANCH=$1 ;;
        --file|-f) shift; FILE=$1 ;;
        --get-hash) shift; GET_HASH=$1 ;;
        --hash) shift; HASH=$1 ;;
        -h) usage; exit 0 ;;
        --range) shift; RANGE=$1 ;;
    esac
    shift
done

# Files could be referenced anywhere in the filesystem, so we need to get
# certain values from the git repo where the file is an object.
pushd "$(dirname "$FILE")" > /dev/null

if [ "$(git rev-parse --is-inside-work-tree)" = false ]; then
    printf "%b Object is not under version control, exiting...\n" "$ERROR"
    exit 1
fi

set_github_url

# Get the path of the cwd relative to the top-level dir.
REL_PATH=$(git rev-parse --show-prefix)
#BRANCH=$(git rev-parse --abbrev-ref HEAD)
BRANCH=$(git branch --show-current)

popd > /dev/null

if [[ ( -n "$HASH" ) || ( -n "$GET_HASH" ) ]]
then
    # If given a branch name or tag, simply get its hash.
    if [[ -n "$GET_HASH" ]]
    then
        HASH=$(git rev-parse "$GET_HASH")
    fi

    GITHUB_URL+="/commit/$HASH"
else
    if [ -n "$FILE" ]
    then
        REL_PATH+=$(basename "$FILE")
    fi

    if [[ -n "$REMOTE_BRANCH" ]]
    then
        BRANCH="$REMOTE_BRANCH"
    fi

    # If the relative path is empty, then we know that it's the top-level dir.
    # In this case, don't futz with the url and skip this conditional.
    if [ -n "$REL_PATH" ]
    then
        TOKEN=$($BLAME && echo "blame" || echo "blob")
        GITHUB_URL+="/$TOKEN/$BRANCH/$REL_PATH"
    fi
fi

if [ -n "$RANGE" ]
then
    GITHUB_URL+="#$RANGE"
fi

if [ "$ARCH" == "Linux" ]
then
    xdg-open "$GITHUB_URL" 2> /dev/null
else
    open "$GITHUB_URL" 2> /dev/null
fi

echo "$GITHUB_URL"

