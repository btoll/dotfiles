if has("autocmd")
    augroup SYNTAX
        autocmd!
        " JavaScript syntax helpers.
        " Typing 'iff' will create an empty if block and then put the cursor within the parens.
        autocmd FileType html,javascript,go inoreabbrev <buffer> iff if () {<cr>}<esc>kt)

        " Typing 'ifd' will create an if block with a debugger and then put the cursor within the parens.
        autocmd FileType html,javascript inoreabbrev <buffer> ifd if () {<cr>debugger;<cr>}<esc>2kt)

        " Typing 'iife' will create an IIFE (es6).
        " Note `<<o` will dedent and then create a new line.
        autocmd FileType html,javascript inoreabbrev <buffer> iife (() => {<cr><tab>'use strict';<cr><cr>})();<esc><<o<esc>

        " Typing 'forr' will create an empty for block, insert two semi-colons within the parens and then
        " put the cursor within the first paren in insert mode.
        autocmd FileType html,javascript inoreabbrev <buffer> forr for (;;) {<cr>}<cr><esc>2kt;

        " Typing 'forin' will create an empty for block, insert the keyword in within the parens and then put the cursor within the first paren in insert mode.
        autocmd FileType html,javascript inoreabbrev <buffer> forin for (in) {<cr>}<cr><esc>2kti

        " Typing 'func' will create a function expression, insert the keyword in within the parens and then put the cursor within the first paren in insert mode.
        autocmd FileType html,javascript inoreabbrev <buffer> func function () {<cr>};<esc>kf(a

        " dump_describes
        " http://stackoverflow.com/a/7515418
        autocmd FileType coffee cnoreabbrev <expr> dd getcmdtype() == ":" && getcmdline() == 'dd' ? '!clear && coffee -p %' : 'dd'
        autocmd FileType javascript cnoreabbrev <expr> dd getcmdtype() == ":" && getcmdline() == 'dd' ? '!clear && dump_describes -t %' : 'dd'
        autocmd FileType javascript cnoreabbrev <expr> ddv getcmdtype() == ":" && getcmdline() == 'ddv' ? '!clear && dump_describes -t % -v' : 'ddv'

        " Run specs only for the current file.
        autocmd FileType javascript cnoreabbrev <expr> jas getcmdtype() == ":" && getcmdline() == 'jas' ? '!clear && jasmine %' : 'jas'

        " Run all specs.
        autocmd FileType javascript cnoreabbrev <expr> jall getcmdtype() == ":" && getcmdline() == 'jall' ? '!clear && npm run specs' : 'jall'

        " Run all specs.
        autocmd FileType typescript cnoreabbrev <expr> ts getcmdtype() == ":" && getcmdline() == 'ts' ? '!clear && ts-node %' : 'ts'

        " Save typing 'debugger' all the time!
        autocmd FileType html,javascript nnoremap <leader>d odebugger;<esc>
        autocmd FileType html,javascript nnoremap <leader>D Odebugger;<esc>

        autocmd FileType coffee nnoremap <leader>d odebugger<esc>
        autocmd FileType coffee nnoremap <leader>D Odebugger<esc>

        " Save fingers from typing console.log. It will paste as the argument(s) whatever is in the default register.
        autocmd FileType c nnoremap <leader>log oprintf(<c-r>");<esc>
        autocmd FileType coffee nnoremap <leader>log oconsole.log(<c-r>")<esc>
        autocmd FileType html,javascript,typescript nnoremap <leader>log oconsole.log(<c-r>");<esc>
        autocmd FileType python nnoremap <leader>log oprint(<c-r>")<esc>
        autocmd FileType sh nnoremap <leader>log oecho "$<c-r>""<esc>

        " Got here!
        autocmd FileType c nnoremap <leader>gh oprintf("got here");<esc>
        autocmd FileType coffee nnoremap <leader>gh oconsole.log('got here')<esc>
        autocmd FileType html,javascript nnoremap <leader>gh oconsole.log('got here');<esc>
        autocmd FileType python nnoremap <leader>gh oprint('got here')<esc>
        autocmd FileType sh nnoremap <leader>gh oecho "got here"<esc>

        " anti-Mitchell pattern - removes \s between properties and colons in objects.
        autocmd FileType html,javascript,go,coffee nnoremap <leader>mitch :% s/\>\(\s\+\):/:/gc<cr>

        " Redefine makeprg for typescript to clear screen before compiling.
        autocmd FileType typescript :set makeprg=clear\ &&\ tsc\ $*\ %

        " Draw a dividing line.
        autocmd FileType javascript nnoremap <leader>line i/* -<esc>yl59pi */<esc>
        autocmd FileType txt,text nnoremap <leader>line i-<esc>yl59p
        autocmd FileType sh nnoremap <leader>line i#<esc>yl59p
    augroup END
endif

