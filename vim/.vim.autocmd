set filetype=vim

"
" NOTE: mq...`q sets a mark to maintain the cursor position!
"

if has("autocmd")
    augroup ABBREVIATIONS
        "
        " Note: `bp` must be defined in .bash_functions to use these abbreviations from the cli!
        " I'm debating if these should even be in here...
        "

        " Assembly boilerplate.
        autocmd FileType asm inoreabbrev bp global _start<cr><cr>;section .data<cr><cr>section .text<cr>_start:<cr>

        " Bash boilerplate.
        autocmd FileType sh inoreabbrev bp #!/bin/bash<cr><cr>

        " C boilerplate.
        autocmd FileType c inoreabbrev bp #include <stdlib.h><cr>#include <stdio.h><cr><cr>int main(int argc, char **argv) {<cr>return 0;<cr>}<cr>

        " C++ boilerplate.
        autocmd FileType cc,cpp inoreabbrev bp #include <iostream><cr><cr>using namespace std;<cr><cr>int main() {<cr><cr>return 0;<cr>}<cr>

        " Elm boilerplate (only in .bash_functions).

        " Go boilerplate.
        " Note that the `bp` abbreviation is unnecessary if vim-go plugin is installed.
        "autocmd FileType go inoreabbrev bp package main<cr><cr>func main() {<cr>}<cr>
        autocmd FileType go inoreabbrev iferr if err != nil {<cr>fmt.Println(err)<cr>return err<cr>}

        " HTML boilerplate (only in .bash_functions).

        " Python boilerplate.
        autocmd FileType python inoreabbrev bp def main():<cr>""" derp """<cr>pass<cr><esc>O<cr><cr>if __name__ == "__main__":<cr>main()

        " CSS and JavaScript resources.
        autocmd FileType html inoreabbrev doctype <!DOCTYPE html>
        autocmd FileType html inoreabbrev scripttag <script src="" type="text/javascript" charset="utf-8"></script>
        autocmd FileType html inoreabbrev linktag <link href="" rel="stylesheet" type="text/css">

        " Set base filetype.
        autocmd FileType conf,text,txt inoreabbrev filetype /* vim: set filetype=text : */
    augroup END

    augroup COMMENTING
        autocmd!
        autocmd FileType asm nnoremap <leader>c mq0i;<esc>`q
        autocmd FileType asm nnoremap <leader>C 0x
        autocmd FileType asm vnoremap <leader>c :s_^_;_g<cr>:noh<cr>
        autocmd FileType asm vnoremap <leader>C :s_^;__g<cr>:noh<cr>

        autocmd FileType css nnoremap <leader>c 0i/*<esc>A*/<esc>
        autocmd FileType css nnoremap <leader>C 02x$xx

        autocmd FileType html nnoremap <leader>c 0i<!--<esc>A--><esc>
        autocmd FileType html nnoremap <leader>C 04x$xxx
        "autocmd FileType html vnoremap <leader>c :s_^_<!--_g|s_$_-->_g<cr>:noh<cr>
        "autocmd FileType html vnoremap <leader>C :s_^<!--__g|s_-->$__g<cr>:noh<cr>

        autocmd FileType vim nnoremap <leader>c mq0i"<esc>`q
        autocmd FileType vim nnoremap <leader>C 0x<cr>
        autocmd FileType vim vnoremap <leader>c :s_^_"_g<cr>:noh<cr>
        autocmd FileType vim vnoremap <leader>C :s_^"__g<cr>:noh<cr>

        " Comment/uncomment out and clear search highlighting for visual blocks.
        autocmd FileType elm,haskell,sql nnoremap <leader>c mq0i--<esc>`q
        autocmd FileType elm,haskell,sql nnoremap <leader>C 02x
        autocmd FileType elm,haskell,sql vnoremap <leader>c :s_^_--_g<cr>:noh<cr>
        autocmd FileType elm,haskell,sql vnoremap <leader>C :s_^--__g<cr>:noh<cr>

        autocmd FileType c,cc,cpp,go,groovy,javascript,php,typescript nnoremap <leader>c mq0i//<esc>`q
        autocmd FileType c,cc,cpp,go,groovy,javascript,php,typescript nnoremap <leader>C 02x
        autocmd FileType c,cc,cpp,go,groovy,javascript,php,typescript vnoremap <leader>c :s_^_//_g<cr>:noh<cr>
        autocmd FileType c,cc,cpp,go,groovy,javascript,php,typescript vnoremap <leader>C :s_^//__g<cr>:noh<cr>

        autocmd FileType coffee,conf,dockerfile,expect,gitconfig,make,python,sh,yaml nnoremap <leader>c mq0i#<esc>`q
        autocmd FileType coffee,conf,dockerfile,expect,gitconfig,make,python,sh,yaml nnoremap <leader>C 0x<cr>
        autocmd FileType coffee,conf,dockerfile,expect,gitconfig,make,python,sh,yaml vnoremap <leader>c :s_^_#_g<cr>:noh<cr>
        autocmd FileType coffee,conf,dockerfile,gitconfig,make,python,sh,yaml vnoremap <leader>C :s_^#__g<cr>:noh<cr>

        " Comment out the block, c-style.
        " From top/down (Start with your cursor anywhere on the first line)...
        autocmd FileType c,cc,cpp,go,html,javascript,php,typescript nnoremap <leader>cb mqO/*<esc>j$%o*/<esc>`q
        " ...and from bottom/up (cursor must be on the closing bracket).
        " NOTE added `h` to back up one char in case it's an arrow function
        " (the `%` won't go up to the opening bracket b/c it's on the
        " semi-colon.
        autocmd FileType c,cc,cpp,go,html,javascript,php,typescript nnoremap <leader>Cb mqo*/<esc>hk%O/*<esc>`q
        " Uncomment out the block, c-style.
        " From top/down (Start with your cursor anywhere on the first line)...
        autocmd FileType c,cc,cpp,go,html,javascript,php,typescript nnoremap <leader>cB mqkdd$%jdd<cr>`q
        " ...and from bottom/up (cursor must be on the closing bracket).
        autocmd FileType c,cc,cpp,go,html,javascript,php,typescript nnoremap <leader>CB mqjddk%kdd<cr>`q
    augroup END

    augroup DEBUGGING
        " Save typing 'debugger' all the time!
        autocmd FileType coffee nnoremap <leader>d odebugger<esc>
        autocmd FileType coffee nnoremap <leader>D Odebugger<esc>

        autocmd FileType html,javascript nnoremap <leader>d odebugger;<esc>
        autocmd FileType html,javascript nnoremap <leader>D Odebugger;<esc>

        autocmd FileType python nnoremap <leader>d oipdb.set_trace()<esc>
        autocmd FileType python nnoremap <leader>D Oipdb.set_trace()<esc>
    augroup END

    augroup DOCS
        autocmd FileType elm nnoremap <leader>d :ElmShowDocs<cr>
        autocmd FileType elm nnoremap <leader>db :ElmBrowseDocs<cr>
    augroup END

    augroup GOT_HERE
        autocmd FileType c,cc,cpp nnoremap <leader>gh oprintf("got here\n");<esc>
        autocmd FileType coffee nnoremap <leader>gh oconsole.log('got here')<esc>
        autocmd FileType elm nnoremap <leader>gh ogh = (Debug.log "DEBUG" "got here")<esc>
        autocmd FileType expect nnoremap <leader>gh oputs "got here"<esc>
        autocmd FileType go nnoremap <leader>gh ofmt.Println("got here")<esc>
        autocmd FileType groovy,python nnoremap <leader>gh oprint("got here")<esc>
        autocmd FileType html,javascript nnoremap <leader>gh oconsole.log('got here');<esc>
        autocmd FileType php nnoremap <leader>gh oecho("got here");<esc>
        autocmd FileType sh nnoremap <leader>gh oecho "got here"<esc>
    augroup END

    augroup HIGHLIGHTING
        " Highlight word (all filetypes).
        nnoremap <space> viw

        " Highlight function (note that it uses the same pattern as <operator:motion>).
        autocmd FileType go nnoremap f<space> :normal [[V$%<cr>
    augroup END

    augroup LOGGING
        " This is a shortcut to log one word (the one under the cursor)
        " See the `log` macro below to log more than one word.
        "
        " 1. Go back one or more words (in case there is a period, i.e. model.sports).
        " 2. Inner yank the word that the cursor is over.
        " 3. Begin the Elm debug syntax, i.e., ( Debug.log
        " 4. Escape and paste in the yanked text that we want to log.
        " 5. Enter insert mode to add the closing double quote and a space.
        " 6. Jump over the word and finish macro with the closing paren.
        autocmd FileType elm nnoremap <leader>l mqyiwi(Debug.log "<esc>pa" <esc>ea)<esc>`q
        "
        " Log more than one word.
        " It will paste as the argument(s) whatever is in the default register ("0p), so it can paste multiple words.
        " Note that "E" will jump to the last letter of a multi-word.
        autocmd FileType elm nnoremap <leader>log mqi(Debug.log "<esc>"0pa" <esc>Ea)<esc>`q
        "
        " Remove debug log
        " This will work as long as the cursor is between the parens!
        " 1. Go back to the open paren.
        " 2. Delete up to and including the second space.
        " 3. Go to the last character before the work boundary, the closed paren in this case, and delete it.
        autocmd FileType elm nnoremap <leader>L mqF(d2f Ex`q

        " It will paste as the argument(s) whatever is in the default register.
        autocmd FileType c,cc,cpp nnoremap <leader>l mqoprintf("%s\n", <c-r>");<esc>`q
        autocmd FileType coffee nnoremap <leader>l mqoconsole.log(<c-r>")<esc>`q

        " Note that if the `fmt` package hasn't been explicitly imported that this snippet will fail unless
        "           let g:go_fmt_command = "goimports"
        " is set (it is).
        autocmd FileType go nnoremap <leader>l mqofmt.Println("<c-r>"", <c-r>")<esc>`q

        autocmd FileType html,javascript,typescript nnoremap <leader>l mqoconsole.log('<c-r>"', <c-r>");<esc>`q
        autocmd FileType php nnoremap <leader>l mqovar_dump(<c-r>");<esc>`q
        autocmd FileType groovy,python nnoremap <leader>l mqoprint(<c-r>")<esc>`q
        autocmd FileType sh nnoremap <leader>l mqoecho "$<c-r>""<esc>`q
    augroup END

    augroup MISC
        " Immediately apply any changes to .vimrc after writing.
        autocmd BufWritePost .vimrc source $MYVIMRC

        " Set autocomplete for JS. <C-X><C-O> to initiate, <C-N> and <C-P> to step through.
"        autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS

        " Add the main function that restores the cursor position and its autocmd so that it gets triggered:
        function! ResCur()
            if line("'\"") <= line("$")
                normal! g`"
                return 1
            endif
        endfunction

        autocmd BufWinEnter * call ResCur()
    augroup END

    augroup SYNTAX
        autocmd!
        " dump_describes
        " http://stackoverflow.com/a/7515418
        autocmd FileType coffee cnoreabbrev <expr> dd getcmdtype() == ":" && getcmdline() == 'dd' ? '!clear && coffee -p %' : 'dd'
        autocmd FileType javascript cnoreabbrev <expr> dd getcmdtype() == ":" && getcmdline() == 'dd' ? '!clear && dump_describes -t %' : 'dd'
        autocmd FileType javascript cnoreabbrev <expr> ddv getcmdtype() == ":" && getcmdline() == 'ddv' ? '!clear && dump_describes -t % -v' : 'ddv'

        " Run specs only for the current file.
        autocmd FileType javascript cnoreabbrev <expr> jas getcmdtype() == ":" && getcmdline() == 'jas' ? '!clear && jasmine %' : 'jas'

        " Run all specs.
        autocmd FileType javascript cnoreabbrev <expr> jall getcmdtype() == ":" && getcmdline() == 'jall' ? '!clear && npm run specs' : 'jall'

        " Run all specs.
        autocmd FileType typescript cnoreabbrev <expr> ts getcmdtype() == ":" && getcmdline() == 'ts' ? '!clear && ts-node %' : 'ts'

        " anti-Mitchell pattern - removes \s between properties and colons in objects.
        autocmd FileType html,javascript,go,coffee nnoremap <leader>mitch :% s/\>\(\s\+\):/:/gc<cr>

        " Redefine makeprg for typescript to clear screen before compiling.
        autocmd FileType typescript :set makeprg=clear\ &&\ tsc\ $*\ %

        " Draw a dividing line.
        autocmd FileType elm nnoremap <leader>line i-<esc>yl59p<esc>
        autocmd FileType go,javascript nnoremap <leader>line i/* -<esc>yl59pi */<esc>
        autocmd FileType txt,text,vim nnoremap <leader>line i-<esc>yl59p<esc>
        autocmd FileType sh nnoremap <leader>line i#<esc>yl59p<esc>
    augroup END

    augroup TOOLING
        augroup BUILD
            autocmd FileType elm nmap <leader>b :ElmMake<cr>
            autocmd FileType go nmap <leader>b :<C-u>call Build_go_files()<cr>
        augroup END

        augroup TEST
            autocmd FileType go nmap <Leader>cov <Plug>(go-coverage-toggle)
        augroup END

        augroup REPL
            autocmd FileType elm nmap <leader>r :ElmRepl<cr>
        augroup END

        augroup RUN
            autocmd FileType c nnoremap <leader>r :!clear && gcc % && ./a.out<cr>
            autocmd FileType cc,cpp nnoremap <leader>r :!clear && g++ % && ./a.out<cr>

            autocmd FileType go nmap <leader>r :!clear<cr><Plug>(go-run)

            autocmd FileType javascript nnoremap <leader>r :!clear && node %<cr>
            autocmd FileType javascript vnoremap <leader>r y:echo system('node ', @")<cr>

            autocmd FileType python nnoremap <leader>r :!clear && python3 %<cr>
            autocmd FileType python vnoremap <leader>r y:echo system('python3 ' @")<cr>
        augroup END

        augroup TEST
            autocmd FileType elm nmap <leader>t :ElmTest<cr>
            autocmd FileType go nmap <leader>t <Plug>(go-test)
        augroup END
    augroup END

    augroup WHITESPACE
        " autoindent = Copy indent from current line when starting a new line.
        " shiftwidth = Number of spaces to use for each step of (auto)indent.
        " expandtab = Spaces are used in indents with the '>' and '<' commands and when 'autoindent' is on.
        " tabstop = Number of spaces that a <Tab> in the file counts for.
        autocmd!

        autocmd FileType c,cfg,coffee,conf,cpp,css,dockerfile,elm,expect,javascript,go,groovy,haskell,html,json,markdown,php,python,sh,text,typescript,vim setlocal autoindent expandtab shiftwidth=4 tabstop=4 fileformat=unix
        " Remember no spaces in Makefiles!
        autocmd FileType make setlocal autoindent shiftwidth=4 tabstop=4 fileformat=unix
        autocmd FileType yaml setlocal autoindent shiftwidth=2 tabstop=2 fileformat=unix

        " Set default syntax for files with no extension.
        autocmd BufNewFile,BufRead * if &filetype == '' | set filetype=sh | endif
    augroup END
endif

